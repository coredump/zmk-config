/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <behaviors/num_word.dtsi>
#include "zmk-helpers/helper.h"

#include <behaviors/rgbled_widget.dtsi>

#ifndef KEYS_L
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5 // Left-hand keys.
#endif

#ifndef KEYS_R
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5 // Right-hand keys.
#endif

#ifndef THUMBS
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                    // Thumb keys.
#endif

#ifdef CONFIG_PM
#define PM_KEY &soft_off
/ {
    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&kscan0>;
    };
};
&soft_off {
	hold-time-ms = <2000>;
};
#else
#define PM_KEY &none
#endif

#define BASE 0
#define MAC 1
#define GAMING 2
#define LOWER 3
#define RAISE 4
#define ADJUST 5
#define MOUSE 6
#define NUM 7
#define NAV 8

#define QUICK_TAP_MS 175

&sk {
	release-after-ms = <1200>;
	quick-release;
};

&lt {
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <180>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(win_sw, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <LT2 RM2 RB1 RB2 RB3>; )

ZMK_TRI_STATE(ctrltab, bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
              ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>; )

#include "combos.dtsi"
#include "leader.dtsi"
#include "mouse.dtsi"


ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LB3 LB4 LH0 RH0 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3>;
    ignored-layers = <MOUSE LOWER RAISE>;)

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)

#define CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define ___ &trans
#define XXX &none

ZMK_CONDITIONAL_LAYER(adjust, LOWER RAISE, ADJUST)

ZMK_ADAPTIVE_KEY(
	ak_space, bindings = <&kp SPACE>;
	akt_sentence { trigger-keys = <EXCL RS(SLASH) LS(SLASH) QMARK DOT>;
    bindings = <&kp SPACE &sk LSHFT>;
    };
)

ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LCTL|MOD_RCTL)>;)

#define LT_BSDEL &lt_bsdel RAISE 0
ZMK_HOLD_TAP(lt_bsdel, bindings = <&mo>, <&bs_del>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&ak_space>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif


ZMK_BASE_LAYER(Base,
                  &kp Q         &kp W         &kp E         &kp R         &kp T      ,     &kp Y     &kp U         &kp I         &kp O        &kp P           ,
                  &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G      ,     &kp H     &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  ,
    			  &kp Z         &kp X         &kp C         &kp V         &kp B      ,     &kp N     &kp M         &kp COMMA     &kp DOT      &kp SLASH       ,
                                                            &lt NAV TAB   &lt LOWER RET,   &lt_spc RAISE 0 &bs_del
)

ZMK_BASE_LAYER(MacOS,
                  ___           ___           ___           ___           ___        ,     ___       ___           ___           ___          ___        ,
                  &hml LCTRL A  ___           &hml LGUI D   ___           ___        ,     ___       ___           &hmr RGUI K   ___          &hmr RGUI SEMI  ,
                  ___           ___           ___           ___           ___        ,     ___       ___           ___           ___          ___           ,
                                                            ___           ___        ,     ___       ___
)

ZMK_BASE_LAYER(Gaming,
                  ___           ___           ___           ___           ___        ,     ___       ___           ___           ___          ___        ,
                  &kp A         &kp S         &kp D         &kp F         &kp G      ,     &kp H   &kp J         &kp K         &kp L        &kp SEMI        ,
                  ___           ___           ___           ___           ___        ,     ___       ___           ___           ___          ___           ,
                                                            &lt NAV TAB   &lt LOWER RET,   &lt_spc RAISE 0 &bs_del
)

ZMK_BASE_LAYER(Lower,
                &kp GRAVE  &kp LESS_THAN  &kp GREATER_THAN  &kp MINUS          &kp PIPE    , &kp CARET  &kp LEFT_BRACE         &kp RIGHT_BRACE        &kp DOLLAR       ___,
                &kp EXCL   &kp ASTERISK   &kp SLASH         &kp EQUAL          &kp AMPS    , &kp HASH   &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp SQT,
                &kp TILDE  &kp PLUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PERCENT , &kp AT_SIGN  &kp COLON ___ ___ ___    ,
                                                            ___           ___        ,     ___       ___
)

ZMK_BASE_LAYER(Raise,
                ___        &kp F9      &kp F10        &kp F11           &kp F12         ,        &kp PG_UP     &kp HOME               &kp UP                 &kp END          ___,
                ___        &kp F5      &kp F6         &kp F7            &kp F8          ,        &kp PG_DN     &kp LEFT               &kp DOWN               &kp RIGHT        ___,
                ___        &kp F1      &kp F2         &kp F3            &kp F4          ,        ___           ___                    ___                    ___              ___   ,
                                                            ___           ___        ,     ___       ___
)

ZMK_BASE_LAYER(Adjust,
                ___       ___		  ___            ___                ___             ,        &bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    ,
                ___       ___         ___            ___                ___             ,        ___        ___                    ___                    ___              ___,
                &bootloader		  ___         ___            ___        ___          ,        &ind_bat   ___                    ___                    ___              &bootloader,
                                                            ___           ___        ,     ___       ___
)

ZMK_BASE_LAYER(Mouse,
        ___ ___ ___ ___ ___  ,  ___      U_WH_U     U_MS_U     U_WH_D     ___     ,
        ___ ___ ___ ___ ___  ,  U_WH_L   U_MS_L     U_MS_D     U_MS_R     U_WH_R  ,
        ___ ___ ___ ___ ___  ,  ___      &mkp LCLK  &mkp MCLK  &mkp RCLK  ___     ,
                       ___           ___        ,     ___      CANCEL
)

ZMK_BASE_LAYER(Num,
        ___    ___    ___    ___    ___     ,    ___       &kp N7    &kp N8    &kp N9    ___        ,
        ___    ___    ___    ___    ___     ,    &kp N0    &kp N4    &kp N5    &kp N6    ___        ,
        ___    ___    ___    ___    ___     ,    &kp DOT   &kp N1    &kp N2    &kp N3    ___        ,
                      ___           ___     ,    ___       CANCEL
)

ZMK_BASE_LAYER(Nav,
                ___        ___         &kp LS(TAB)   &win_sw           &ctrltab    ,        &kp PG_UP     &kp HOME               &kp UP                 &kp END          ___,
                ___        ___         ___           ___               ___         ,        &kp PG_DN     &kp LEFT               &kp DOWN               &kp RIGHT        ___,
                PM_KEY     ___         ___           ___               ___         ,        ___           ___                    ___                    ___              ___      ,
                                                            ___           ___        ,     ___       ___
)
