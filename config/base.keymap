/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>


#include "zmk-helpers/helper.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LF5 LF4 LF3 LF2 LF1 LF0 LEC // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 REC RF0 RF1 RF2 RF3 RF4 RF5 // Right-hand keys.
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3                                    // Thumb keys.

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3
#define MOUSE 4

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <180>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.


// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;)

#include "combos.dtsi"
#include "mouse.dtsi"

ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions =
        <LT2 LT3 LH1 RT2 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RF1 RF2 RF3 RH1 RH2 RH3>;
    ignored-layers = <MOUSE LOWER RAISE>;)

#define ___ &trans
#define XXX &none

ZMK_CONDITIONAL_LAYER(adjust, LOWER RAISE, ADJUST)

#ifndef ZMK_BASE_LAYER
#define ZMK_BASE_LAYER(name, LN, RN, LT, RT, LM, RM, LB, RB, LH, RH)  \
    ZMK_LAYER(                                                                 \
        name,                                                                  \
                 LN RN                                                         \
                 LT RT                                                         \
                 LM RM                                                         \
                 LB RB                                                         \
                 LH RH                  \
    )
#endif

ZMK_BASE_LAYER(Default,
    &kp GRAVE  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5              ,         &kp N6  &kp N7        &kp N8        &kp N9       &kp N0          &kp BSPC,
    &kp TAB    &kp Q         &kp W         &kp E         &kp R         &kp T               ,         &kp Y   &kp U         &kp I         &kp O        &kp P           &kp BSPC,
    &kp ESC    &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G               ,         &kp H   &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  &kp SQT,
    &kp LSHFT  &kp Z         &kp X         &kp C         &kp V         &kp B   &kp C_MUTE  , XXX     &kp N   &kp M         &kp COMMA     &kp DOT      &kp FSLH        &kp RSHFT,
                             &kp LALT      &kp LCTRL                                       ,                               &kp RCTRL     &kp RALT
)

ZMK_BASE_LAYER(Lower,
    ___         ___         ___           ___               ___                ___         , ___        ___                    ___                    ___             ___            ___,
    &swapper    &kp GRAVE  &kp LESS_THAN  &kp GREATER_THAN  &kp MINUS          &kp PIPE    , &kp CARET  &kp LEFT_BRACE         &kp RIGHT_BRACE        &kp DOLLAR      ___            ___,
    &caps_word  &kp EXCL   &kp ASTERISK   &kp SLASH         &kp EQUAL          &kp AMPS    , &kp HASH   &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp BACKSLASH  ___,
    ___         &kp TILDE  &kp PLUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PERCENT ___ , ___    &kp AT_SIGN  &kp COLON ___ ___ ___ ___,
                           ___            ___                                                  ,                     ___       ___
)

ZMK_BASE_LAYER(Raise,
    ___  &kp F1        &kp F2        &kp F3       &kp F4          &kp F5,    &kp F6     &kp F7    &kp F8    &kp F9     &kp F10  &kp F11,
    ___  &kp INS       &kp PSCRN     &kp K_CMENU  ___             &swapper,  &kp PG_UP  ___       &kp UP    ___        ___      &kp F12,
    ___  &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL    &kp LEFT_SHIFT  ___     ,  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL  &kp BSPC,
    ___  &kp LC(Z)     &kp LC(X)     &kp LC(C)    &kp LC(V)       ___ ___ ,  ___ ___ ___ ___ ___ ___ ___,
                       ___ ___, ___ ___
)

ZMK_BASE_LAYER(Adjust,
    &bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4, XXX XXX XXX XXX XXX XXX,
    XXX XXX XXX XXX XXX &bootloader, &bootloader XXX XXX XXX XXX XXX,
    XXX XXX XXX XXX XXX &sys_reset, &sys_reset XXX XXX XXX XXX XXX,
    XXX XXX XXX XXX XXX XXX XXX, XXX XXX XXX XXX XXX XXX XXX,
    XXX XXX, XXX XXX
)

ZMK_BASE_LAYER(Mouse,
    ___ ___ ___ ___ ___ ___      ,      ___     ___        ___        ___        ___     ___ ,
    ___ ___ ___ ___ ___ ___      ,      ___     ___        U_MS_U     ___        ___     ___ ,
    ___ ___ ___ ___ ___ ___      ,      U_WH_L  U_MS_L     U_MS_D     U_MS_R     U_WH_R  ___ ,
    ___ ___ ___ ___ ___ ___  ___ , ___  ___     &mkp LCLK  &mkp MCLK  &mkp RCLK  ___     ___,
                ___ ___      ,                  U_WH_D  U_WH_U
)


/* vim: set ft=c tw=146: */
