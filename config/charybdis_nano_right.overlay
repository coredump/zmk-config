#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>

&pinctrl {
	spi0_default: spi0_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
					<NRF_PSEL(SPIM_MOSI, 0, 6)>,
					<NRF_PSEL(SPIM_MISO, 0, 6)>;
		};
	};

	spi0_sleep: spi0_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
					<NRF_PSEL(SPIM_MOSI, 0, 6)>,
					<NRF_PSEL(SPIM_MISO, 0, 6)>;
			low-power-enable;
		};
	};
};


&spi0 {
	status = "okay";
	compatible = "nordic,nrf-spim";
	pinctrl-0 = <&spi0_default>;
	pinctrl-1 = <&spi0_sleep>;
	pinctrl-names = "default", "sleep";
	cs-gpios = <&gpio0 17 GPIO_ACTIVE_LOW>;

	trackball: trackball@0 {
		status = "okay";
		compatible = "pixart,pmw3610";
		reg = <0>;
		spi-max-frequency = <2000000>;
		irq-gpios = <&gpio0 20 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		cpi = <600>;
		// swap-xy; /* optional */
		// invert-x; /* optional */
		invert-y; /* optional */
		evt-type = <INPUT_EV_REL>;
		x-input-code = <INPUT_REL_X>;
		y-input-code = <INPUT_REL_Y>;

		force-awake;
		/* keep the sensor awake while ZMK activity state is ACTIVE,
		   fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
		   thus, the sensor would be a `wakeup-source` */

		force-awake-4ms-mode;
		/* while force-awake is acitvated, enable this mode to force sampling per
		   4ms, where the default sampling rate is 8ms. */
		/* NOTE: apply this mode if you need 250Hz with direct USB connection. */
	};
};

/ {
	trackball_listener {
		compatible = "zmk,input-listener";
		device = <&trackball>;

		/* base processor chain on all layers */
		input-processors = <&zip_xy_scaler 5 5>;

		/* scroll override */
		scroller: scroller {
			layers           = <12>;
			input-processors = <
									   &zip_xy_scaler 1 10                              // Scales the scroll speed
									   &zip_xy_to_scroll_mapper                         // Converts XY movement to scroll events
									   &zip_scroll_transform (INPUT_TRANSFORM_Y_INVERT) // Inverts the scroll direction
							   >;
		};

		/* SNIPE slow-pointer override */
		slow_pointer: slow_pointer {
			layers           = <10>;
			input-processors = <&zip_xy_scaler 2 6>;
		};

		/* WARP slow-pointer override */
		fast_pointer: fast_pointer {
			layers           = <11>;
			input-processors = <&zip_xy_scaler 6 2>;
		};
	};
};