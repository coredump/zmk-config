/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>


#include "zmk-helpers/helper.h"

/*                                      38 KEY MATRIX / LAYOUT MAPPING

    ╭──────────────────────┬────────────────────╮         ╭────────────────────────┬──────────────────────╮
    │  0   1   2   3   4 │  5   6   7   8   9 │        │  LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
 ╭──╯ 10  11  12  13  14 │ 15  16  17  18  19 ╰───╮ ╭──╯    LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4   ╰───╮
 │ 20 21  22  23  24  25 │ 26  27  28  29  30  31 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰──────────╮ 32  33  34 │ 35  36  37 ╭───────────╯ ╰──────────╮  LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────────╯
            ╰────────────┴────────────╯                        ╰──────────────┴─────────────╯
*/

#define CONFIG_WIRELESS
#define TOTEM_KB
#define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)  \
    ZMK_LAYER(                                                                 \
        name,                                                                  \
                 LT RT                                                         \
                 LM RM                                                         \
                 LB RB                                                         \
                 LH RH                  \
    )

#include "zmk-helpers/key-labels/totem.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5 // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5 // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                    // Thumb keys.

#define BASE 0
#define GAMING 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define MOUSE 5

#define QUICK_TAP_MS 175

&sk {
	release-after-ms = <1200>;
	quick-release;
};

// bodging this because the pin 0 died

&kscan0 {
    row-gpios
            = <&xiao_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;
};

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <180>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <RM2 RB1 RB2 RB3>; )

ZMK_TRI_STATE(wswapper, bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
              ignored-key-positions = <RM2 RB1 RB2 RB3>; )

#include "combos.dtsi"
#include "mouse.dtsi"

ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LH1 RH1 RM1 RM2 RM3 RT1 RT2 RT3 RB1 RB2 RB3>;
    ignored-layers = <MOUSE LOWER RAISE>;)

#define ___ &trans
#define XXX &none


ZMK_CONDITIONAL_LAYER(adjust, LOWER RAISE, ADJUST)

ZMK_ADAPTIVE_KEY(
	ak_space, bindings = <&kp SPACE>;
	akt_sentence { trigger-keys = <EXCL RS(SLASH) LS(SLASH) QMARK DOT>;
    bindings = <&kp SPACE &sk LSHFT>;
    };
)

ZMK_BASE_LAYER(Default,
                  &kp Q         &kp W         &kp E         &kp R         &kp T      ,     &kp Y     &kp U         &kp I         &kp O        &kp P           ,
                  &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G      ,     &kp H     &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  ,
    &kp ESC       &kp Z         &kp X         &kp C         &kp V         &kp B      ,     &kp N     &kp M         &kp COMMA     &kp DOT      &kp SLASH         XXX,
                                              &kp LALT      &mo LOWER     &kp RET      ,     &ak_space &mo RAISE     &kp RALT
)

ZMK_BASE_LAYER(Gaming,
                  &kp Q         &kp W         &kp E         &kp R         &kp T      ,     &kp Y   &kp U         &kp I         &kp O        &kp P           ,
                  &kp A         &kp S         &kp D         &kp F         &kp G      ,     &kp H   &kp J         &kp K         &kp L        &kp SEMI        ,
    &kp ESC       &kp Z         &kp X         &kp C         &kp V         &kp B      ,     &kp N   &kp M         &kp COMMA     &kp DOT      &kp SLASH         XXX,
                                              &kp LALT      &mo LOWER     &kp RET    ,     &kp SPC &mo RAISE     &kp RALT
)

ZMK_BASE_LAYER(Lower,
                &kp GRAVE  &kp LESS_THAN  &kp GREATER_THAN  &kp MINUS          &kp PIPE    , &kp CARET  &kp LEFT_BRACE         &kp RIGHT_BRACE        &kp DOLLAR       ___,
                &kp EXCL   &kp ASTERISK   &kp SLASH         &kp EQUAL          &kp AMPS    , &kp HASH   &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp SQT,
    ___         &kp TILDE  &kp PLUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PERCENT , &kp AT_SIGN  &kp COLON ___ ___ ___ ___,
                           ___            ___ ___                                          ,                     ___       ___ ___
)

ZMK_BASE_LAYER(Raise,
        &kp F1        &kp F2        &kp F3       &kp F4          &kp F5,    &kp F6     &kp F7    &kp F8    &kp F9     &kp F10  ,
        &kp INS       &kp PSCRN     &kp K_CMENU  &kp LS(TAB)    &swapper,  &kp PG_UP  ___       &kp UP    ___         &kp F11  ,
    ___ &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL    &kp LEFT_SHIFT &wswapper     ,  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  ___      &kp F12,
         ___ ___ ___ ___ ___ , ___ ___ ___ ___ ___
)

ZMK_BASE_LAYER(Adjust,
                &bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    , XXX XXX XXX XXX XXX,
                XXX XXX XXX XXX   &sys_reset, &sys_reset XXX XXX XXX XXX,
    &bootloader XXX XXX XXX XXX XXX         , XXX XXX XXX XXX XXX &bootloader,
                            XXX XXX XXX     , XXX XXX XXX
)

ZMK_BASE_LAYER(Mouse,
        ___ ___ ___ ___ ___  ,  U_WH_U   ___        U_MS_U     U_WH_D     ___     ,
        ___ ___ ___ ___ ___  ,  U_WH_L   U_MS_L     U_MS_D     U_MS_R     U_WH_R  ,
    ___ ___ ___ ___ ___ ___  ,  ___      &mkp LCLK  &mkp MCLK  &mkp RCLK  ___    ___   ,
          ___  ___  ___      ,  ___ ___ ___
)

/* vim: set ft=c tw=146: */
